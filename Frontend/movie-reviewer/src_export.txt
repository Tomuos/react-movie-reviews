==== ./src/App.css ====
* {
  margin: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  /* background-color: #323232; */
  background-color: rgb(47, 47, 79);
  color: white;
}

::placeholder{
  color: black;
  font-size: 1.2rem;
}

input, textarea {
  font-size: 16px; /* Sets the font size */
  padding: 8px;   /* Sets the padding inside the input fields */
  font-family: Arial, sans-serif; /* Sets the font type */
  margin: 5px 0;  /* Adds spacing between the elements and other content */
}==== ./src/App.js ====
import './App.css';
import Cards from './components/Cards/Cards';
import MovieReviews from './components/MovieReviews/MovieReviews';
import { Routes, Route } from 'react-router-dom';


function App() {
  return (
    <div className="App">
      

      <Routes>
        <Route path="/" element={<Cards />} /> 
        <Route path="/movie/:id" element={<MovieReviews />}/>
        
      </Routes>
    </div>
  );
}

export default App;
==== ./src/Backend-calls.js ====
export const getReviewsByMovieId = async (movieId) => {
    const response = await fetch(`http://localhost:8000/api/v1/reviews/movie/${movieId}`);
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data;
}

export const addReview = async (movieId, user, review) => {
    const response = await fetch(`http://localhost:8000/api/v1/reviews/new`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
            movieId: movieId,
            user: user,
            review: review,
        }),
    });
    if (response.ok) {
        return response;
    } else {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
}

export const getReview = async (reviewId) => {
    const response = await fetch(`http://localhost:8000/api/v1/reviews/${reviewId}`);
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data;
}

export const editReview = async (reviewId, review, user) => {
    const response = await fetch(`http://localhost:8000/api/v1/reviews/${reviewId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
            // reviewId: reviewId,
            review: review,
            user: user, 
        }),
    });
    console.log(response);
    if (response.ok) {
        return response;
    } else {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
}

// deleteReview function

export const deleteReview = async (reviewId) => {
    const response = await fetch(`http://localhost:8000/api/v1/reviews/${reviewId}`, {
        method: 'DELETE',
    });
    if (response.ok) {
        return response;
    } else {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
}==== ./src/components/Card/Card.css ====
.row-of-tiles {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    margin: 0 auto;
    padding: 1rem;
    
}

.card {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    background-color: #24484a;
    color:#fff;
    border: 5px solid #24484a;
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.8);
    text-align: center;
    padding: 1rem;
    max-height: auto;
    margin: 0 auto;
    width: 28rem;
    height: 40rem;
    
}

.card :link,:visited {
    text-decoration: none;
    color: #fff;
    background-color: #921409;
    padding: 0.3rem;
    border-radius: 5px;
    transition: 0.3s;
    font-weight: 700;
}

.card :link:hover {
    
    color: #921409;;
    background-color: #fff
}

.card .title {
    font-size: 1.5rem; /* Adjust the font size as needed */
    
    overflow: hidden; /* Ensures that the text doesn't spill out of its container */
    text-overflow: ellipsis; /* Adds an ellipsis if the text is too long to fit */
    margin-bottom: 1rem;
    font-weight: 700;
}

.rating,
.released {
    font-size: 1 rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

.card .poster {
    display: flex;
    justify-content: center;
    align-items: center;    
    width: 60%;
    height: 60%;
    border-radius: 30px;    
    padding: 1rem;
    
}

.card #description {
    font-size: 1rem;
    font-weight: 400;
    margin-bottom: 1rem;
    text-align: left;
}
.content-css {
    text-align: left;
}

#description span {
    font-weight: bold;
}==== ./src/components/Card/Card.js ====
import "./Card.css";
import { useState } from "react";
import { Link } from 'react-router-dom';

function Card({ id, title, description, image, rating, releaseDate }) {
    const DESCRIPTION_LIMIT = 100;
    const [isExpanded, setIsExpanded] = useState(false);
    const showMore = description.length > DESCRIPTION_LIMIT;
    const displayedDescription = isExpanded || !showMore ? description : description.slice(0, DESCRIPTION_LIMIT) + '...';

    const toggleDescription = () => {
        setIsExpanded(!isExpanded);
    };

    return (
        <div className="row-of-tiles">
            <div className="card">
                <header className="title">{title}</header>
                <img className="poster" src={image} alt={title} />
                <Link to={`/movie/${id}`} className="reviews-button">Reviews</Link>
                <div id="description">
                    <span>Overview: </span>
                    {displayedDescription}
                    {showMore && (
                        <button onClick={toggleDescription}>
                            {isExpanded ? 'Show Less' : 'Show More'}
                        </button>
                    )}
                </div>
                <p><span className="rating" >Rating:</span> {(rating).toFixed(1)} / 10</p>
                <p><span className="released">Released:</span> {releaseDate}</p>
            </div>
        </div>
    );
}

export default Card;
==== ./src/components/Cards/Cards.css ====
.searchBar{
    top: 0;
    display: flex;
    justify-content: left;
    align-items: center;
    position: sticky;
    margin-top: 20px;
    background-color: rgb(47, 47, 79);
    /* background-color: #323232; */
    /* background-color: #ca2929; */
    width: 100%;

}.row{
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    justify-content:space-between;
    /* grid-gap: 1rem; */
    margin: 0 auto;

}

@media screen and (max-width: 2000px){
    .row{
        grid-template-columns: repeat(4, 1fr);
    }
    
}

@media screen and (max-width: 1680px){
    .row{
        grid-template-columns: repeat(3, 1fr);
    }
    
}

@media screen and (max-width: 1280px){
    .row{
        grid-template-columns: repeat(2, 1fr);
    }
   
    
}

@media screen and (max-width: 768px){
    .row{
        grid-template-columns: repeat(1, 1fr);
    }
    
    .search-input, .search-button {
        font-size: medium; /* Adjust font size */
        padding: 10px 18px; /* Adjust padding */
    }
}

@media screen and (max-width: 480px){
    .row{
        grid-template-columns: repeat(1, 1fr);
    }
    .search-input, .search-button {
        font-size: small; /* Further adjust font size */
        padding: 8px 16px; /* Further adjust padding */
    }
}

@media screen and (max-width: 320px){
    .row{
        grid-template-columns: repeat(1, 1fr);
    }
    
}




==== ./src/components/Cards/Cards.js ====
import "./Cards.css";
import "../Card/Card.js";
import Card from "../Card/Card.js";
import { useState, useEffect } from "react";

import SearchMovie from "../Search/Search.js";

const API_Key = process.env.REACT_APP_API_KEY;
const APILINK = `https://api.themoviedb.org/3/movie/popular?api_key=${API_Key}&language=en-US&page=1`;
const SEARCHAPI = `https://api.themoviedb.org/3/search/movie?&api_key=${API_Key}&query=`;


function Cards() {
    const [movies, setMovies] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    


    async function getMovies(movie_Link) {
        const response = await fetch(movie_Link);
        const data = await response.json();
        setMovies(data.results);      
    }

    useEffect(() => {
        getMovies(APILINK);
    }
    , []);



    async function handleSearchMovies(e) {
        e.preventDefault();
        if (searchTerm) {
            const response = await fetch(SEARCHAPI + searchTerm);
            const data = await response.json();
            setMovies(data.results);
            console.log(data.results);
            setSearchTerm('');
        }
    }





    return (
        <div>            
        <SearchMovie searchTerm={searchTerm} setSearchTerm={e => setSearchTerm(e.target.value)} handleSearchMovies={handleSearchMovies} />
                <div className="row">
            {movies && movies.map((movie) => (
                <Card
                    key={movie.id}
                    id={movie.id}
                    title={movie.title}
                    description={movie.overview}
                    image={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}
                    rating={movie.vote_average}
                    releaseDate={movie.release_date}
                    
                />
            ))}
            </div>

        </div>
    )
}

export default Cards;==== ./src/components/MovieReviews/MovieReviews.css ====
.reviews-page {
    display: flex;
    flex-direction: row;
    background-color: #46105f;
    
}

.card-movie {
    background-color: #24484a;
    padding: 30px;
}


.card-movie-details {
    display: flex;
    flex-direction: column;
    width: 500px;
    font-size: 1.2rem;
    gap: 10px;
}

.card-title-span,
.card-overview,
.card-rating,
.card-vote-count,
.card-released {
    font-weight: bold;
}

.card-reviews-area {
    background-color: rgb(47, 47, 79);
    width: 100%;
    padding: 20px;
    color: white;
    gap: 10px;

    /* height: 50%; */
}

.card-review-user,
.card-review-text {
    font-weight: bold; /* This will make the text bold */
    font-size: large;
}

.addReview {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 20px;
    background-color: #24484a;
    color: white;
}
/* text area with set rows and no editiable sizes */
textarea{
    resize: none;
    overflow: hidden;
    margin-top: 10px;
    height: 100px;
    width: 100%;
    padding: 10px;
    font-size: 1.2rem;
    scrollbar-width: thin;
}

.reviewButton {
    background-color: #5a0d7d;
    color: white;
    margin-top: 5px;
    padding: 10px;
    font-size: 1.2rem;
    border: none;
    cursor: pointer;
    border-radius: 10px;
    transition: 0.5s;
}

.reviewButton:hover {
    background-color: #9b58ba;
    color: black;
}

.input-name{
    padding: 10px;
    font-size: 1.2rem;
    border-radius: 10px;
    border: 2px solid #cc4a4a;
    outline: none;
    transition: 0.5s;
}

.input-name:hover::placeholder{
    
    color: white;
}

.input-name:hover{
    background-color: #cc4a4a;
    color: white;
    
}

.text-input{
    padding: 10px;
    font-size: 1.2rem;
    border-radius: 10px;
    border: 2px solid #cc4a4a;
    outline: none;
    transition: 0.5s;
}

.text-input:hover::placeholder{
    
    color: white;
}

.text-input:hover{
    background-color: #cc4a4a;
    color: white;
}

.reviews-header {
    color: white;
}

.card-reviews {
    display: flex;
    flex-direction: column;
    background-color: #24484a;
    gap: 10px;
    padding: 20px;
    color: black;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
    margin-bottom: 15px;
}

.card-review {
    background-color: white; /* Or any other color you want for the box */
    padding: 15px; /* Spacing inside the box */
    margin-bottom: 10px; /* Space between each review box */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.9); /* Horizontal offset, vertical offset, blur radius, color */
    border-radius: 5px;
}

.no-reviews {
    color: white;
    font-size: 1.5rem;
    text-align: center;
    margin-top: 20px;
}

.modal{
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(8px);

}

.modal-content{
    background-color: #24484a;
    padding: 20px;
    border-radius: 10px;
    color: white;
    width: 50%;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.close{
    color: white;
    font-size: 2rem;
    align-self: flex-end;
    cursor: pointer;
    transition: 0.5s;
}

.close:hover {
    color: #f00; /* Changes color on hover, example is red */
    transform: scale(1.1); /* Makes the 'X' slightly larger on hover */
  }

.space-between {
    display: flex;
    justify-content: space-between;
}==== ./src/components/MovieReviews/MovieReviews.js ====
import "./MovieReviews.css";
import { useParams } from 'react-router-dom';
import { useState, useEffect } from "react";
import { getReviewsByMovieId, addReview, getReview, editReview, deleteReview } from "../../Backend-calls.js";


function MovieReviews() {
    const { id } = useParams(); // Get the movie ID from the URL
    const [movie, setMovie] = useState(null); // State to hold the movie data
    const [reviews, setReviews] = useState([]); // State to hold the reviews
    const [user, setUser] = useState(""); // State to hold the user name
    const [createUser, setCreateUser] = useState(""); // State to hold the user name
    const [review, setReview] = useState(""); // State to hold the review text
    const [createReview, setCreateReview] = useState(""); // State to hold the review text
    const [isModalOpen, setIsModalOpen] = useState(false); // State to control the modal
    const [currentReview, setCurrentReview] = useState(null); // State to hold the current review

    useEffect(() => {
        const API_Key = process.env.REACT_APP_API_KEY;
        async function fetchMovie() {
            try {
                const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_Key}&language=en-US`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                setMovie(data); // Store the movie data in state
            } catch (error) {
                console.error("Could not fetch movie data:", error);
            }
        }

        fetchMovie();
    }, [id]); // Dependency array with the ID to refetch when it changes

    useEffect(() => {
        async function fetchReviews() {
            try {
                const data = await getReviewsByMovieId(id); // Fetch the reviews using the backend call
                setReviews(data); // Store the reviews in state
            } catch (error) {
                console.error("Could not fetch reviews:", error);
            }
        }

        fetchReviews();
    }, [id]); // Dependency array with the ID to refetch when it changes

    // Add a review
    async function handleAddReview(event) {
        event.preventDefault();
        const data = await addReview(id, createUser, createReview); // Add the review using the backend call
        console.log(data);
        if (data.ok) {
            const reviews = await getReviewsByMovieId(id); // Fetch the reviews again to update the list
            setReviews(reviews);
            setCreateUser(""); // Clear the user input
            setCreateReview(""); // Clear the review input
            console.log("Review added successfully");
        } else {
            console.error("Could not add review:", data.error);
    }}


// Edit review button, When clicked open modal, Get review information, Populate edit form, Make edits, Update/save, Put sent, Edited review diplayed 

    
    // Open the modal and get the review information
async function handleGetReviewInfo(reviewId) {
    const data = await getReview(reviewId); // Get the review information using the backend call
    console.log(data);
    setCurrentReview(data); // Store the review information in state
    setUser(data.user); // Set user state
    setReview(data.review); // Set review state
    setIsModalOpen(true); // Open the modal
}

// modal background click to close modal
    // Close the modal
    function handleModalBackgroundClink(event) {
        if (event.target === event.currentTarget) {
            setIsModalOpen(false);
        }
    }

  // Edit a review
async function handleEditReview(event) {
    event.preventDefault();
    try {
        const response = await editReview(currentReview._id, review, user);
        console.log(response, "edit review response in movie reviews");

        if (response.ok) {
            // Update the local state to reflect the changes
            setReviews(reviews.map(r => r._id === currentReview._id ? { ...r, review: review, user: user } : r));
            setIsModalOpen(false); // Close the modal
            console.log("Review edited successfully");
        }
    } catch (error) {
        console.error("Could not edit review:", error);
    }
}

// Delete a review

async function removeReview() {
    try {
        const response = await deleteReview(currentReview._id);
        console.log(response, "delete review response in movie reviews");
        if (response.ok) {
            // Update the local state to reflect the changes
            setReviews(reviews.filter(r => r._id !== currentReview._id));
           
            console.log("Review deleted successfully");
        }
    } catch (error) {
        console.error("Could not delete review:", error);
    }
}



    
    // Render the movie details using the 'movie' state
    return (
        <div className="reviews-page">
            {movie && (
                    <div key={movie.id} className="card-movie">
                        <h1>Movie Information</h1>   
                        <img className="card-poster" src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />
                        
                        <div className="card-movie-details">
                            <header className="card-title"><span className="card-title-span" >Title: </span>{movie.title}</header>
                            <div id="card-description"><span className="card-overview">Overview: </span>{movie.overview}</div> 
                            <p><span className="card-rating">Rating: </span> {(movie.vote_average).toFixed(1)} / 10</p>
                            <p><span className="card-vote-count">Votes: </span> {movie.vote_count}</p>
                            <p><span className="card-released">Released: </span> {movie.release_date}</p>
                        </div>

                    </div>
            )}

            <div className="card-reviews-area">

                <div className="card-reviews">
                <h1 className="reviews-header">Reviews</h1>
                {reviews && reviews.map((review, index) => (
                        <div key={index} className="card-review">
                            <p><span className="card-review-user">User: </span>{review.user}</p>
                            <p><span className="card-review-text">Review: </span>{review.review}</p>

                            <div className="space-between">
                            <button onClick={() => handleGetReviewInfo(review._id)} className="edit-button"  >Edit</button>
                            <button className="delete-button" onClick={() => removeReview(review._id)} >Delete</button>
                            </div>
                        </div>
                    ))}
                <div className="no-reviews">
                    {reviews.length === 0 && <p>No reviews yet</p>}
                </div>
                </div>


                <div className="addReview">
                    <h1>Add a Review</h1>
                    <p>Review form will be displayed here</p>
                    <form onSubmit={handleAddReview}>
                    <input 
                            onChange={e => setCreateUser(e.target.value)}
                            type="text" 
                            placeholder="Your name" 
                            className="input-name" 
                            value={createUser} // Controlled component
                        />
                        <textarea 
                            onChange={e => setCreateReview(e.target.value)}
                            className="text-input"  
                            placeholder="Your review"
                            value={createReview} // Controlled component
                        />
                        <button 
                            className="reviewButton" 
                            type="submit">Submit</button>
                    </form>
                </div>

            </div>
                        
                {/* Modal for editing reviews */}
                {isModalOpen && (
                    <div className="modal" onClick={handleModalBackgroundClink}>
                        <div className="modal-content">
                            <span className="close" onClick={() => setIsModalOpen(false)}>&times;</span>
                            <h2>Edit Review</h2>
                            {currentReview && (
                                <form onSubmit={handleEditReview}>
                                    <input 
                                        onChange = {e => setUser(e.target.value)}
                                        type="text" 
                                        placeholder="Your name" 
                                        className="input-name" 
                                        defaultValue={currentReview.user} />
                                    <textarea 
                                        onChange = {e => setReview(e.target.value)}
                                        className="text-input"  
                                        placeholder="Your review" 
                                        defaultValue={currentReview.review} />
                                    <button 
                                        className="reviewButton" 
                                        type="submit">Save</button>
                                </form>
                            )}
                        </div>
                        
                    </div>
                )}



        </div>
    );
}

export default MovieReviews;
==== ./src/components/Search/Search.css ====


.search-input{
    font-size: large;
    padding: 12px 20px;
    margin: 8px 15px;
    box-sizing: border-box;
    border: 2px solid #cc4a4a;
    -webkit-transition: 0.5s;
    transition: 0.5s;
    outline: none;
    border-radius: 5px;
}

.search-input:hover::placeholder{
    color: white;
}

.search-input:hover{
    background-color: #cc4a4a;
    color: white;
}

/* .search-input-button{
    font-size: large;
    padding: 12px 20px;
    margin: 8px 15px;
    box-sizing: border-box;
    border: 2px solid #cc4a4a;
    -webkit-transition: 0.5s;
    transition: 0.5s;
    outline: none;
    border-radius: 5px;
}

.search-input-button:hover{
    background-color: #cc4a4a;
    color: white;
    cursor: pointer;
} */

.search-button {
    background-color: transparent;
    color: #FFFFFF;
    transition: background-color 0.3s, color 0.3s; /* Smooth transition for hover effect */
    cursor: pointer; /* Cursor changes to a hand when hovered */
}

.search-button:hover {
    background-color: #cc4a4a; /* Hover effect */
    color: white;
}==== ./src/components/Search/Search.js ====
import './Search.css';

export default function SearchMovie ({searchTerm, setSearchTerm, handleSearchMovies}) {
    return (
        <div className='searchBar'>
            <form className="search">
                <input
                    type="text"
                    placeholder="Look for a movie..."
                    value={searchTerm}
                    onChange={setSearchTerm}      
                    className='search-input'          
                    />
                <button onClick={handleSearchMovies} className='search-button search-input'>Search</button>
            </form>
        </div>
        ) 
    } ==== ./src/index.css ====
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
==== ./src/index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import './index.css';
import App from './App';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    
    </BrowserRouter>
  </React.StrictMode>
);


